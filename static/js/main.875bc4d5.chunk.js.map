{"version":3,"sources":["components/Calculator.js","components/KeypadRow.js","components/Button.js","components/LargeButton.js","components/keyPad.js","components/ResultScreen.js","components/ComputationScreen.js","components/Screen.js","App.js","serviceWorker.js","index.js"],"names":["Calculator","state","equation","result","onButtonPress","event","pressedButton","target","innerHTML","clear","indexOf","evalResult","eval","Number","isInteger","toFixed","setState","error","alert","trim","substr","length","this","className","React","Component","keypadRow","props","children","button","classes","type","push","join","onClick","LargeButton","Button","keypad","KeypadRow","resultScreen","computationScreen","screen","ResultScreen","ComputationScreen","app","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.875bc4d5.chunk.js","sourcesContent":["import React from 'react';\nimport Screen from './Screen';\nimport Keypad from './keyPad';\n\n\nclass Calculator extends React.Component {\n  state = {\n    equation: '',\n    result: 0\n  }\n  onButtonPress = event => {\n    let equation = this.state.equation;\n    const pressedButton = event.target.innerHTML;\n    if (pressedButton === 'C') return this.clear();\n    else if ((pressedButton >= '0' && pressedButton <= '9') || pressedButton === '.') equation += pressedButton;\n    else if (['+', '-', '*', '/', '%'].indexOf(pressedButton) !== -1) equation += ' ' + pressedButton + ' ';\n    else if (pressedButton === '=') {\n      try {\n        const evalResult = eval(equation);\n        const result = Number.isInteger(evalResult)? evalResult : evalResult.toFixed(2);\n        this.setState({result});\n      } catch (error) {\n        alert('Invalid Mathematical Equation');\n      }\n    }\n    else {\n      equation = equation.trim();\n      equation = equation.substr(0, equation.length - 1);\n    }\n                \n    this.setState({equation: equation});\n  }\n  clear() {\n    this.setState({equation: '', result: 0});\n  }\n  render() {\n    return (\n      <main className=\"calculator\">\n        <Screen equation={this.state.equation} result={this.state.result} />\n        <Keypad onButtonPress={this.onButtonPress}/>\n      </main>\n    );\n  }\n}\nexport default Calculator;","import React from \"react\";\n\nconst keypadRow = (props) => (\n    <div className=\"keypad__row\">\n      {props.children}\n    </div>\n  );\n  export default keypadRow;","import React from 'react';\n\n\nconst button = (props) => {\n    const classes = ['btn'];\n    if (typeof props !== 'undefined' && typeof props.type !== 'undefined')\n      classes.push('btn--' + props.type);\n    return (\n      <button className={classes.join(' ')} onClick=\n      {props.onButtonPress}>\n        {props.children}\n      </button>\n    );\n  }\n  export default button;","import React from 'react';\nimport Button from \"./Button\";\n\nconst LargeButton = (props) => <Button type=\"large\" {...props} />;\n\nexport default LargeButton;","import React from 'react'\nimport KeypadRow from \"./KeypadRow\"\nimport Button from \"./Button\"\nimport LargeButton from \"./LargeButton\";\n\nconst keypad = (props) => (\n    <section className=\"keypad\">\n        <KeypadRow>\n            <LargeButton onButtonPress={props.onButtonPress}>clear</LargeButton>\n            <Button type=\"operator\" onButtonPress={props.onButtonPress}>/</Button>\n        </KeypadRow>\n        <KeypadRow>\n            <Button onButtonPress={props.onButtonPress}>1</Button>\n            <Button onButtonPress={props.onButtonPress}>2</Button>\n            <Button onButtonPress={props.onButtonPress}>3</Button>\n            <Button type=\"operator\" onButtonPress={props.onButtonPress}>-</Button>\n        </KeypadRow>\n        <KeypadRow>\n            <Button onButtonPress={props.onButtonPress}>4</Button>\n            <Button onButtonPress={props.onButtonPress}>5</Button>\n            <Button onButtonPress={props.onButtonPress}>6</Button>\n            <Button type=\"operator\" onButtonPress={props.onButtonPress}>+</Button>\n        </KeypadRow>\n        <KeypadRow>\n            <Button onButtonPress={props.onButtonPress}>7</Button>\n            <Button onButtonPress={props.onButtonPress}>8</Button>\n            <Button onButtonPress={props.onButtonPress}>9</Button>\n            <Button type=\"operator\" onButtonPress={props.onButtonPress}>=</Button>\n        </KeypadRow>\n    </section>\n    )\nexport default keypad;\n","import React from 'react';\n\n\nconst resultScreen = (props) => (\n  <div className=\"result-screen\">\n    {props.children}\n  </div>\n);\nexport default resultScreen;","import React from 'react';\n\n\nconst computationScreen = (props) => (\n  <div className=\"computation-screen\">\n    {props.children}\n  </div>\n);\nexport default computationScreen;\n","import React from 'react';\nimport ResultScreen from './ResultScreen';\nimport ComputationScreen from './ComputationScreen';\n\n\nconst screen = (props) => (\n  <section className=\"screen\">\n    <ResultScreen>{props.result}</ResultScreen>\n    <ComputationScreen>{props.equation}</ComputationScreen>\n  </section>\n);\nexport default screen;","import React from 'react';\nimport './App.css';\nimport Calculator from \"./components/Calculator\";\n\nconst app = () => <div className=\"app\">\n  <Calculator/>\n</div>;\n\nexport default app;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}